version: '3.8'

services:
  beyondfire-mongodb:
    image: mongo:6.0
    container_name: beyondfire-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=BeyondFireAdmin2023!
      - MONGO_INITDB_DATABASE=beyondfire_cloud
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    command: ["--auth", "--bind_ip_all"]
    networks:
      - beyondfire-network

  beyondfire-mongodb-init:
    image: mongo:6.0
    container_name: beyondfire-mongodb-init
    restart: "no"
    depends_on:
      - beyondfire-mongodb
    environment:
      - MONGO_USERNAME=admin
      - MONGO_PASSWORD=BeyondFireAdmin2023!
      - MONGO_DATABASE=beyondfire_cloud
    command: >
      bash -c "
      echo 'Waiting for MongoDB to be ready...' &&
      sleep 30 &&
      echo 'Initializing MongoDB...' &&
      mongosh --host beyondfire-mongodb:27017 -u admin -p BeyondFireAdmin2023! --authenticationDatabase admin --eval '
        const dbName = \"beyondfire_cloud\";
        const db = db.getSiblingDB(dbName);
        
        // Create collections if they do not exist
        if (!db.getCollectionNames().includes(\"users\")) {
          db.createCollection(\"users\");
          print(\"Created users collection\");
          
          // Create default admin user
          db.users.insertOne({
            email: \"admin@beyondfire.cloud\",
            name: \"Admin\",
            password: \"\\$argon2id\\$v=19\\$m=65536,t=3,p=1\\$tnFQzxFRMuYPJUOLlJQMYQ\\$3Gg9PJSGSKGjEmKvx7b0yNGNGFHXpZ4IGIvYZjAOvFo\",
            role: \"admin\",
            createdAt: new Date(),
            updatedAt: new Date()
          });
          print(\"Created default admin user\");
        }
        
        if (!db.getCollectionNames().includes(\"services\")) {
          db.createCollection(\"services\");
          print(\"Created services collection\");
          
          // Create default FE2 service
          db.services.insertOne({
            id: \"fe2-docker\",
            name: \"FE2 - Feuerwehr Einsatzleitsystem\",
            description: \"Alamos FE2 - Professionelles Einsatzleitsystem fÃ¼r Feuerwehren\",
            price: 19.99,
            image: \"alamosgmbh/fe2:latest\",
            resources: {
              cpu: 2,
              memory: \"2GB\",
              storage: \"10GB\"
            },
            composeTemplate: \"version: \\\\\"3\\\\\"\\\\nservices:\\\\n  fe2_database:\\\\n    image: mongo:4.4.29\\\\n    ports:\\\\n      - 27017\\\\n    volumes:\\\\n      - fe2_db_data:/data/db\\\\n    restart: unless-stopped\\\\n\\\\n  fe2_app:\\\\n    image: alamosgmbh/fe2:2.36.100\\\\n    environment:\\\\n      - FE2_EMAIL={{FE2_EMAIL}}\\\\n      - FE2_PASSWORD={{FE2_PASSWORD}}\\\\n      - FE2_ACTIVATION_NAME=fe2_{{UNIQUE_ID}}\\\\n      - FE2_IP_MONGODB=fe2_database\\\\n      - FE2_PORT_MONGODB=27017\\\\n    ports:\\\\n      - 83\\\\n    volumes:\\\\n      - fe2_logs:/Logs\\\\n      - fe2_config:/Config\\\\n    restart: unless-stopped\\\\n    depends_on:\\\\n      - fe2_database\\\\n\\\\n  fe2_nginx:\\\\n    image: nginx:alpine\\\\n    ports:\\\\n      - \\\\\"{{PORT}}:80\\\\\"\\\\n    environment:\\\\n      - NGINX_HOST=localhost\\\\n    command: sh -c \\\\\"echo \\\\\\\\\\\\\"server { listen 80; location / { proxy_pass http://fe2_app:83; } }\\\\\\\\\\\\\" > /etc/nginx/conf.d/default.conf && nginx -g \\\\\\\\\\\\\"daemon off;\\\\\\\\\\\\\"\\\\\"\\\\n    restart: unless-stopped\\\\n    depends_on:\\\\n      - fe2_app\\\\n\\\\nvolumes:\\\\n  fe2_db_data:\\\\n  fe2_logs:\\\\n  fe2_config:\\\\n\",
            active: true,
            createdAt: new Date(),
            updatedAt: new Date()
          });
          print(\"Created default FE2 service\");
        }
        
        if (!db.getCollectionNames().includes(\"bookings\")) {
          db.createCollection(\"bookings\");
          print(\"Created bookings collection\");
        }
        
        if (!db.getCollectionNames().includes(\"logs\")) {
          db.createCollection(\"logs\");
          print(\"Created logs collection\");
        }
        
        print(\"MongoDB initialization completed successfully\");
      '
      "
    networks:
      - beyondfire-network

  beyondfire-cloud-api:
    image: ${DOCKER_REGISTRY:-ghcr.io}/mohijack/beyondfire-cloud-api:latest
    container_name: beyondfire-cloud-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PORTAINER_URL=http://192.168.200.170:9000
      - PORTAINER_USERNAME=philipp
      - PORTAINER_PASSWORD=qwert123456!
      # - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      # - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - JWT_SECRET=beyondfire-jwt-secret-key-2023
      - JWT_REFRESH_SECRET=beyondfire-refresh-secret-key-2023
      - SERVER_IP=192.168.200.170
      - MONGO_URI=mongodb://admin:BeyondFireAdmin2023!@beyondfire-mongodb:27017/beyondfire_cloud?authSource=admin
      - MONGO_DATABASE=beyondfire_cloud
      - RATE_LIMIT_WINDOW_MS=15000
      - RATE_LIMIT_MAX=100
      - TOKEN_EXPIRY=1h
      - REFRESH_TOKEN_EXPIRY=7d
    volumes:
      - beyondfire-logs:/app/logs
    depends_on:
      - beyondfire-mongodb-init
    networks:
      - beyondfire-network

  beyondfire-cloud-frontend:
    image: ${DOCKER_REGISTRY:-ghcr.io}/mohijack/beyondfire-cloud-frontend:latest
    container_name: beyondfire-cloud-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - beyondfire-cloud-api
    networks:
      - beyondfire-network

volumes:
  beyondfire-logs:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local

networks:
  beyondfire-network:
    driver: bridge
